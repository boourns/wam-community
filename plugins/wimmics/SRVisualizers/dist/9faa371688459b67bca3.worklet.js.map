{"version":3,"file":"9faa371688459b67bca3.worklet.js","mappings":"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","sources":["webpack://livegain/./src/utils/buffer.ts","webpack://livegain/./src/utils/math.ts","webpack://livegain/./src/utils/utils.ts","webpack://livegain/./src/utils/yin.ts","webpack://livegain/./src/worklets/AudioWorkletProxyProcessor.ts","webpack://livegain/webpack/bootstrap","webpack://livegain/webpack/runtime/define property getters","webpack://livegain/webpack/runtime/hasOwnProperty shorthand","webpack://livegain/webpack/runtime/make namespace object","webpack://livegain/./src/worklets/TemporalAnalyser.worklet.ts"],"sourcesContent":["import { mod } from \"./math\";\n\ntype TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array;\ntype TypedArrayConstructor = typeof Int8Array | typeof Uint8Array | typeof Int16Array | typeof Uint16Array | typeof Int32Array | typeof Uint32Array | typeof Uint8ClampedArray | typeof Float32Array | typeof Float64Array;\nexport const sum = (array: TypedArray | number[], from = 0, length = array.length) => {\n    let sum = 0;\n    const l = array.length;\n    for (let i = 0; i < length; i++) {\n        sum += array[(from + i) % l];\n    }\n    return sum;\n};\nexport const mean = (array: TypedArray | number[], from = 0, length = array.length) => sum(array, from, length) / length;\nexport const median = (array: TypedArray | number[], from = 0, length = array.length) => {\n    if (length === 0) throw new Error(\"trying to calculate median of empty array\");\n    const sortedArray = (from + length > array.length ? Array.isArray(array) ? array.slice(from).concat(array.slice(0, from + length - array.length)) : sliceBuffer(array, length, from) : array.slice(from, from + length)).sort();\n    if (length % 2 === 0) return (sortedArray[length / 2 - 1] + sortedArray[length / 2]) / 2;\n    return sortedArray[~~(length / 2)];\n};\nexport const maxIndex = (array: TypedArray | number[], from = 0, length = array.length) => {\n    const l = array.length;\n    if (!l) return 0;\n    let index = 0;\n    let max = array[0];\n    let i = length;\n    while (i-- > 1) {\n        const cur = array[(from + i) % l];\n        if (cur <= max) continue;\n        max = cur;\n        index = i;\n    }\n    return index;\n};\nexport const energy = (signal: TypedArray | number[], from = 0, length = signal.length) => {\n    let sum = 0;\n    let sample = 0;\n    const l = signal.length;\n    for (let i = 0; i < length; i++) {\n        sample = signal[(from + i) % l];\n        sum += sample * sample;\n    }\n    return sum;\n};\nexport const rms = (signal: TypedArray | number[], from = 0, length = signal.length) => Math.sqrt(energy(signal, from, length) / signal.length);\nexport const absMax = (signal: TypedArray | number[], from = 0, length = signal.length) => {\n    let max = 0;\n    let sample = 0;\n    const l = signal.length;\n    for (let i = 0; i < length; i++) {\n        sample = Math.abs(signal[(from + i) % l]);\n        if (sample > max) max = sample;\n    }\n    return max;\n};\nexport const zcr = (signal: TypedArray | number[], from = 0, length = signal.length) => {\n    let zcr = 0;\n    let lastPositive = true;\n    let positive = true;\n    const l = signal.length;\n    for (let i = 0; i < length; i++) {\n        positive = signal[(from + i) % l] >= 0;\n        if (positive !== lastPositive) zcr++;\n        lastPositive = positive;\n    }\n    return zcr;\n};\nexport const centroid = (array: TypedArray | number[], from = 0, length = array.length) => {\n    let weightedSum = 0;\n    let weight = 0;\n    let sample = 0;\n    const l = array.length;\n    for (let i = 0; i < length; i++) {\n        sample = array[(from + i) % l];\n        weightedSum += i * Math.abs(sample);\n        weight += sample;\n    }\n    return weight === 0 ? 0 : weightedSum / weight;\n};\nexport const conjugatedCentroid = (array: TypedArray | number[], factor: number, from = 0, length = array.length) => {\n    let weightedSum = 0;\n    let weight = 0;\n    let sample = 0;\n    const l = array.length;\n    for (let i = 0; i < length; i++) {\n        sample = array[(from + i) % l];\n        weightedSum += (i ** factor) * Math.abs(sample);\n        weight += sample;\n    }\n    return weight === 0 ? 0 : weightedSum / weight;\n};\nexport const geometricMean = (array: TypedArray | number[], from = 0, length = array.length) => {\n    let sum = 0;\n    let sample = 0;\n    const l = array.length;\n    for (let i = 0; i < length; i++) {\n        sample = array[(from + i) % l];\n        if (sample <= 0) return 0;\n        sum += Math.log(sample);\n    }\n    return Math.exp(sum / length);\n};\nexport const flatness = (array: TypedArray | number[], from = 0, length = array.length) => geometricMean(array, from, length) / mean(array, from, length);\n/**\n * https://essentia.upf.edu/reference/std_Flux.html\n */\nexport const flux = (cur: TypedArray | number[], prev: TypedArray | number[], norm?: \"L1\" | \"L2\", halfRectify?: boolean) => {\n    let flux = 0;\n    if (norm === \"L2\") {\n        if (halfRectify === true) { // L2 + halfRectify\n            for (let i = 0; i < cur.length; i++) {\n                const diff = cur[i] - prev[i];\n                if (diff < 0) continue;\n                flux += diff * diff;\n            }\n            return Math.sqrt(flux);\n        }\n        for (let i = 0; i < cur.length; i++) { // L2 not halfRectify\n            const diff = cur[i] - prev[i];\n            flux += diff * diff;\n        }\n        return Math.sqrt(flux);\n    }\n    if (halfRectify === true) { // L1 + halfRectify\n        for (let i = 0; i < cur.length; i++) {\n            const diff = cur[i] - prev[i];\n            if (diff < 0) continue;\n            flux += diff;\n        }\n        return flux;\n    }\n    for (let i = 0; i < cur.length; i++) { // L1 not halfRectify\n        const diff = cur[i] - prev[i];\n        flux += Math.abs(diff);\n    }\n    return flux;\n};\n/**\n * https://github.com/meyda/meyda/blob/master/src/extractors/spectralKurtosis.js=\n */\nexport const kurtosis = (array: TypedArray | number[], from = 0, length = array.length) => {\n    const c1 = centroid(array, from, length);\n    const c2 = conjugatedCentroid(array, 2, from, length);\n    const c3 = conjugatedCentroid(array, 3, from, length);\n    const c4 = conjugatedCentroid(array, 4, from, length);\n    const numerator = -3 * c1 ** 4 + 6 * c1 * c2 - 4 * c1 * c3 + c4;\n    const denominator = (c2 - c1 ** 2) ** 2;\n    return numerator / denominator;\n};\n/**\n * https://github.com/meyda/meyda/blob/master/src/extractors/spectralSkewness.js\n */\nexport const skewness = (array: TypedArray | number[], from = 0, length = array.length) => {\n    const c1 = centroid(array, from, length);\n    const c2 = conjugatedCentroid(array, 2, from, length);\n    const c3 = conjugatedCentroid(array, 3, from, length);\n    const numerator = 2 * c1 ** 3 - 3 * c1 * c2 + c3;\n    const denominator = (c2 - c1 ** 2) ** 1.5;\n    return numerator / denominator;\n};\n/**\n * https://essentia.upf.edu/reference/std_RollOff.html\n *\n * @param {TypedArray} array\n * @param {number} [cutoff] Between 0 - 1\n * @returns\n */\nexport const rolloff = (array: TypedArray | number[], from = 0, length = array.length, cutoff?: number) => {\n    let e = energy(array, from, length);\n    const threshold = (cutoff || 0.99) * e;\n    let n = length - 1;\n    let element;\n    while (e > threshold && n >= 0) {\n        element = array[(n + from) % length];\n        e -= element * element;\n        --n;\n    }\n    return n + 1;\n};\nexport const slope = (array: TypedArray | number[], from = 0, n = array.length) => {\n    const xSum = n * n / 2;\n    const x2Sum = (n - 1) * n * (2 * n - 1) / 6;\n    let ySum = 0;\n    let xySum = 0;\n    let y;\n    for (let x = 0; x < n; x++) {\n        y = array[(x + from) % n];\n        ySum += y;\n        xySum += x * y;\n    }\n    return (n * xySum - xSum * ySum) / (n * x2Sum - xSum * xSum);\n};\nexport const spread = (array: TypedArray | number[], from = 0, length = array.length) => Math.sqrt(conjugatedCentroid(array, 2, from, length)) - centroid(array, from, length) ** 2;\n/**\n * Copy buffer to another, support negative offset index\n */\nexport const setTypedArray = <T extends TypedArray = TypedArray>(to: T, from: T, offsetTo?: number, offsetFrom?: number) => {\n    const toLength = to.length;\n    const fromLength = from.length;\n    const spillLength = Math.min(toLength, fromLength);\n    let spilled = 0;\n    let $to = mod(offsetTo, toLength) || 0;\n    let $from = mod(offsetFrom, fromLength) || 0;\n    while (spilled < spillLength) {\n        const $spillLength = Math.min(spillLength - spilled, toLength - $to, fromLength - $from);\n        const $fromEnd = $from + $spillLength;\n        if ($from === 0 && $fromEnd === fromLength) to.set(from, $to);\n        else to.set(from.subarray($from, $fromEnd), $to);\n        $to = ($to + $spillLength) % toLength;\n        $from = $fromEnd % fromLength;\n        spilled += $spillLength;\n    }\n    return $to;\n};\n\nexport const getSubTypedArray = <T extends TypedArray = TypedArray>(from: T, length: number, offset = 0) => {\n    const fromLength = from.length;\n    const $ = mod(offset, fromLength) || 0;\n    if ($ === 0 && length === fromLength) return from;\n    if ($ + length < fromLength) return from.subarray($, $ + length) as T;\n    const to = new (from.constructor as TypedArrayConstructor)(length) as T;\n    setTypedArray(to, from, 0, $);\n    return to;\n};\n\nexport const sliceBuffer = <T extends TypedArray = TypedArray>(from: T, length: number, offset?: number) => {\n    const fromLength = from.length;\n    const $ = mod(offset, fromLength) || 0;\n    if ($ === 0 && length === fromLength) return from.slice();\n    if ($ + length < fromLength) return from.slice($, $ + length) as T;\n    const to = new (from.constructor as TypedArrayConstructor)(length) as T;\n    setTypedArray(to, from, 0, $);\n    return to;\n};\n/**\n * http://www.fftw.org/fftw3_doc/The-Halfcomplex_002dformat-DFT.html\n */\nexport const fftw2Amp = (from: Float32Array, windowEnergyFactor: number) => {\n    const { length } = from;\n    const amps = new Float32Array(length / 2);\n    for (let i = 0; i < length / 2; i++) {\n        const real = from[i];\n        const imag = (i === 0 || i === length / 2 - 1) ? 0 : from[length - i];\n        amps[i] = (real * real + imag * imag) ** 0.5 / length * windowEnergyFactor;\n    }\n    return amps;\n};\nexport const estimateFreq = (amps: Float32Array, sampleRate: number) => indexToFreq(maxIndex(amps), amps.length, sampleRate);\nexport const indexToFreq = (i: number, fftBins: number, sampleRate: number) => (i % fftBins) / fftBins * sampleRate / 2;\n","import { isNumberArray } from \"./utils\";\n\n/**\n * Mod support wrapping with negative numbers\n */\nexport const mod = (x: number, y: number): number => (x % y + y) % y;\n/**\n * Round a number to multiple of another\n */\nexport const round = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.round(x * (1 / to)) / (1 / to) : Math.round(x / to) * to);\n/**\n * Floor a number to multiple of another\n */\nexport const floor = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.floor(x * (1 / to)) / (1 / to) : Math.floor(x / to) * to);\n/**\n * Ceil a number to multiple of another\n */\nexport const ceil = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.ceil(x * (1 / to)) / (1 / to) : Math.ceil(x / to) * to);\n/**\n * Degree to radian\n */\nexport const toRad = (degrees: number): number => degrees * Math.PI / 180;\n/**\n * MIDI note number to string\n */\nexport const toMIDI = (f: number): string => [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"][(f % 12 + 12) % 12] + Math.round(f / 12 - 2);\n/**\n * Linear amplitude ([0, 1]) to dB ([-Inf, 0])\n *\n * @param {number} a linear amplitude value\n * @returns {number} dB value\n */\nexport const atodb = (a: number): number => 20 * Math.log10(a);\n/**\n * dB ([-Inf, 0]) to Linear mplitude ([0, 1])\n *\n * @param {number} db dB value\n * @returns {number} linear amplitude value\n */\nexport const dbtoa = (db: number): number => 10 ** (db / 20);\n/**\n * De-scale a exponently scaled value\n *\n * @param {number} x normalized value to scale between ([0, 1])\n * @param {number} e exponent factor used to scale, 0 means linear, 1 does ** 1.5 curve\n * @returns {number} de-scaled value\n */\nexport const iNormExp = (x: number, e: number): number => Math.max(0, x) ** (1.5 ** -e);\n/**\n * Scale exponently a normalized value\n *\n * @param {number} x normalized value to scale between ([0, 1])\n * @param {number} e exponent factor, 0 means linear, 1 does ** 1.5 curve\n * @returns {number} scaled value\n */\nexport const normExp = (x: number, e: number): number => Math.max(0, x) ** (1.5 ** e);\n\nexport const scale = (x: number, l1: number, h1: number, l2: number, h2: number) => {\n    const r1 = h1 - l1;\n    const r2 = h2 - l2;\n    return (x - l1) / r1 * r2 + l2;\n};\n\nexport const scaleClip = (x: number, l1: number, h1: number, l2: number, h2: number) => Math.max(l2, Math.min(h2, scale(x, l1, h1, l2, h2)));\n\n// eslint-disable-next-line arrow-body-style\nexport const isIdentityMatrix = (x: number[][]) => {\n    return Array.isArray(x)\n    && x.every((row, i) => isNumberArray(row)\n    && row.length === x.length\n    && row.every((e, j) => e === (j === i ? 1 : 0)));\n};\n\nexport const identityMatrix = (dim: number) => new Array(dim).fill(undefined).map((x, i) => new Array(dim).fill(undefined).map((y, j) => +(i === j)));\n","/* eslint-disable arrow-body-style */\n\nexport const isStringArray = (x: any): x is string[] => Array.isArray(x) && x.every(e => typeof e === \"string\");\nexport const isNumberArray = (x: any): x is number[] => Array.isArray(x) && x.every(e => typeof e === \"number\");\n\nexport const stringifyError = (data: any) => {\n    if (typeof data === \"string\") return data;\n    if (data instanceof Error) return data.message;\n    if (typeof data === \"object\") return JSON.stringify(data);\n    return `${data}`;\n};\nexport const parseToPrimitive = (value: any) => {\n    try {\n        return JSON.parse(value);\n    } catch (e) {\n        return value.toString();\n    }\n};\nexport const rgbaMax2Css = (maxColor: number[]) => {\n    const cssColor = [255, 255, 255, 1] as [number, number, number, number];\n    if (Array.isArray(maxColor)) {\n        for (let i = 0; i < 3; i++) {\n            if (typeof maxColor[i] === \"number\") cssColor[i] = Math.floor(maxColor[i] * 255);\n        }\n        if (typeof maxColor[3] === \"number\") cssColor[3] = maxColor[3];\n    }\n    return `rgba(${cssColor.join(\",\")})`;\n};\n/**\n * Gives OS name as follows:\n * \"Windows\"    for all versions of Windows,\n * \"MacOS\"      for all versions of Macintosh OS,\n * \"Linux\"      for all versions of Linux,\n * \"UNIX\"       for all other UNIX flavors,\n * \"Unknown\" indicates failure to detect the OS\n *\n * @returns {\"Windows\" | \"MacOS\" | \"UNIX\" | \"Linux\" | \"Unknown\"} OS name\n */\nexport const detectOS = (): \"Windows\" | \"MacOS\" | \"UNIX\" | \"Linux\" | \"Unknown\" => {\n    const { appVersion } = navigator;\n    if (appVersion.indexOf(\"Win\") !== -1) return \"Windows\";\n    if (appVersion.indexOf(\"Mac\") !== -1) return \"MacOS\";\n    if (appVersion.indexOf(\"X11\") !== -1) return \"UNIX\";\n    if (appVersion.indexOf(\"Linux\") !== -1) return \"Linux\";\n    return \"Unknown\";\n};\nexport const detectEndianness = () => {\n    const uInt32 = new Uint32Array([0x11223344]);\n    const uInt8 = new Uint8Array(uInt32.buffer);\n    if (uInt8[0] === 0x44) return \"le\";\n    if (uInt8[0] === 0x11) return \"be\";\n    return \"Unknown\";\n};\nexport const detectBrowserCore = () => {\n    if ((window as any).chrome) return \"Chromium\";\n    if ((window as any).InstallTrigger) return \"Gecko\";\n    return \"Unknown\";\n};\nexport const roundedRect = (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number | number[]) => {\n    const radii = [0, 0, 0, 0];\n    if (typeof radius === \"number\") radii.fill(radius);\n    else radius.forEach((v, i) => radii[i] = v);\n    ctx.beginPath();\n    ctx.moveTo(x + radii[0], y);\n    ctx.lineTo(x + width - radii[1], y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radii[1]);\n    ctx.lineTo(x + width, y + height - radii[2]);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radii[2], y + height);\n    ctx.lineTo(x + radii[3], y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radii[3]);\n    ctx.lineTo(x, y + radii[0]);\n    ctx.quadraticCurveTo(x, y, x + radii[0], y);\n    ctx.closePath();\n    ctx.stroke();\n};\nexport const fillRoundedRect = (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number | number[]) => {\n    const radii = [0, 0, 0, 0];\n    if (typeof radius === \"number\") radii.fill(radius);\n    else radius.forEach((v, i) => radii[i] = v);\n    ctx.beginPath();\n    ctx.moveTo(x + radii[0], y);\n    ctx.lineTo(x + width - radii[1], y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radii[1]);\n    ctx.lineTo(x + width, y + height - radii[2]);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radii[2], y + height);\n    ctx.lineTo(x + radii[3], y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radii[3]);\n    ctx.lineTo(x, y + radii[0]);\n    ctx.quadraticCurveTo(x, y, x + radii[0], y);\n    ctx.closePath();\n    ctx.fill();\n};\nexport const selectElementRange = (e: HTMLElement) => {\n    const elementIsEditable = (e: HTMLElement): e is HTMLInputElement | HTMLTextAreaElement => !!e.nodeName.match(/^(INPUT|TEXTAREA)$/i);\n    const selection = window.getSelection();\n    if (elementIsEditable(e)) {\n        e.focus();\n        e.select();\n        return;\n    }\n    if (selection.setBaseAndExtent) {\n        // Safari\n        selection.setBaseAndExtent(e, 0, e, e.hasChildNodes() ? 1 : 0);\n        return;\n    }\n    if (selection.addRange && selection.removeAllRanges && document.createRange) {\n        // Mozilla or Opera 10.5+\n        const range = document.createRange();\n        range.selectNodeContents(e);\n        selection.removeAllRanges();\n        selection.addRange(range);\n    }\n};\nexport const selectElementPos = (e: HTMLElement, pos: number) => {\n    const range = document.createRange();\n    const selection = window.getSelection();\n    range.setStart(e.childNodes[0], pos);\n    range.collapse(true);\n    selection.removeAllRanges();\n    selection.addRange(range);\n};\n// eslint-disable-next-line arrow-body-style\nexport const getPropertyDescriptor = (obj: { [key: string]: any }, key: string): PropertyDescriptor => {\n    return Object.getOwnPropertyDescriptor(obj, key) || getPropertyDescriptor(Object.getPrototypeOf(obj), key);\n};\nexport const getPropertyDescriptors = (obj: Function | { [key: string]: any }): PropertyDescriptorMap => {\n    if (typeof obj === \"function\") return Object.getOwnPropertyDescriptors(obj);\n    const proto = Object.getPrototypeOf(obj);\n    if (obj !== Object.prototype && proto === Object.prototype) return Object.getOwnPropertyDescriptors(obj);\n    return Object.assign(proto ? getPropertyDescriptors(proto) : {}, Object.getOwnPropertyDescriptors(obj));\n};\n","interface YinParams {\n    threshold: number;\n    sampleRate: number;\n    probabilityThreshold: number;\n}\n\nconst detect = (bufferIn: Float32Array, paramsIn?: Partial<YinParams>) => {\n    const { threshold = 0.1, sampleRate = 48000, probabilityThreshold = 0.1 } = paramsIn;\n    let bufferSize = 1;\n    while (bufferSize < bufferIn.length) {\n        bufferSize *= 2;\n    }\n    bufferSize /= 2;\n\n    const yinBufferSize = bufferSize / 2;\n    const yinBuffer = new Float32Array(yinBufferSize);\n\n    let prob = 0;\n    let tau;\n    let delta;\n\n    for (let t = 1; t < yinBufferSize; t++) {\n        for (let i = 0; i < yinBufferSize; i++) {\n            delta = bufferIn[i] - bufferIn[i + t];\n            yinBuffer[t] += delta * delta;\n        }\n    }\n    yinBuffer[0] = 1;\n    yinBuffer[1] = 1;\n    let runningSum = 0;\n    for (let t = 1; t < yinBufferSize; t++) {\n        runningSum += yinBuffer[t];\n        yinBuffer[t] *= t / runningSum;\n    }\n    for (tau = 2; tau < yinBufferSize; tau++) {\n        if (yinBuffer[tau] < threshold) {\n            while (tau + 1 < yinBufferSize && yinBuffer[tau + 1] < yinBuffer[tau]) {\n                tau++;\n            }\n            prob = 1 - yinBuffer[tau];\n            break;\n        }\n    }\n    if (tau === yinBufferSize || yinBuffer[tau] >= threshold) {\n        return null;\n    }\n    if (prob < probabilityThreshold) {\n        return null;\n    }\n    let betterTau;\n    let x0;\n    let x2;\n    if (tau < 1) {\n        x0 = tau;\n    } else {\n        x0 = tau - 1;\n    }\n    if (tau + 1 < yinBufferSize) {\n        x2 = tau + 1;\n    } else {\n        x2 = tau;\n    }\n    if (x0 === tau) {\n        if (yinBuffer[tau] <= yinBuffer[x2]) {\n            betterTau = tau;\n        } else {\n            betterTau = x2;\n        }\n    } else if (x2 === tau) {\n        if (yinBuffer[tau] <= yinBuffer[x0]) {\n            betterTau = tau;\n        } else {\n            betterTau = x0;\n        }\n    } else {\n        const s0 = yinBuffer[x0];\n        const s1 = yinBuffer[tau];\n        const s2 = yinBuffer[x2];\n        betterTau = tau + (s2 - s0) / (2 * (2 * s1 - s2 - s0));\n    }\n\n    return sampleRate / betterTau;\n};\nexport default detect;\n","import { AudioWorkletGlobalScope, MessagePortRequest, MessagePortResponse, TypedMessageEvent } from \"@webaudiomodules/sdk-parammgr\";\nimport { AudioWorkletProxyProcessor } from \"./AudioWorkletProxyProcessor.types\";\n\ndeclare const globalThis: AudioWorkletGlobalScope;\nconst { AudioWorkletProcessor } = globalThis;\n\nconst Processor = class extends AudioWorkletProcessor {\n    static fnNames: string[] = [];\n    _disposed = false;\n    constructor() {\n        super();\n        const resolves: Record<number, ((...args: any[]) => any)> = {};\n        const rejects: Record<number, ((...args: any[]) => any)> = {};\n        let messagePortRequestId = -1;\n        const handleDisposed = () => {\n            this.port.removeEventListener(\"message\", handleMessage);\n            this.port.close();\n        };\n        const handleMessage = async (e: TypedMessageEvent<MessagePortResponse & MessagePortRequest>) => {\n            const { id, call, args, value, error } = e.data;\n            if (call) {\n                const r: MessagePortResponse = { id };\n                try {\n                    r.value = await (this as any)[call](...args);\n                } catch (e) {\n                    r.error = e;\n                }\n                this.port.postMessage(r as any);\n                if (this._disposed) handleDisposed();\n            } else {\n                if (error) rejects[id]?.(error);\n                else if (resolves[id]) resolves[id]?.(value);\n                delete resolves[id];\n                delete rejects[id];\n            }\n        };\n        const call = (call: string, ...args: any[]) => new Promise<any>((resolve, reject) => {\n            const id = messagePortRequestId--;\n            resolves[id] = resolve;\n            rejects[id] = reject;\n            this.port.postMessage({ id, call, args });\n        });\n        const Ctor = (this.constructor as typeof AudioWorkletProxyProcessor);\n        Ctor.fnNames.forEach(name => (this as any)[name] = (...args: any[]) => call(name, ...args));\n        this.port.start();\n        this.port.addEventListener(\"message\", handleMessage);\n    }\n} as typeof AudioWorkletProxyProcessor;\n\nexport default Processor;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { rms, zcr, setTypedArray, absMax } from \"../utils/buffer\";\nimport { mod } from \"../utils/math\";\nimport yinEstimate from \"../utils/yin\";\nimport { AudioWorkletGlobalScope, TypedAudioParamDescriptor } from \"@webaudiomodules/sdk-parammgr\";\nimport { ITemporalAnalyserProcessor, ITemporalAnalyserNode, TemporalAnalyserParameters, TemporalAnalysis } from \"./TemporalAnalyserWorklet.types\";\nimport AudioWorkletProxyProcessor from \"./AudioWorkletProxyProcessor\";\n\nconst processorID = \"__WebAudioModule_LiveGain_TemporalAnalyser\";\ndeclare const globalThis: AudioWorkletGlobalScope & { SharedArrayBuffer: typeof SharedArrayBuffer | typeof ArrayBuffer; Atomics: typeof Atomics };\nif (!globalThis.SharedArrayBuffer) globalThis.SharedArrayBuffer = ArrayBuffer;\nconst { registerProcessor, sampleRate } = globalThis;\n\n/**\n * Some data to transfer across threads\n */\nclass TemporalAnalyserAtoms {\n    private readonly _sab: SharedArrayBuffer;\n    private readonly _$read: Uint32Array;\n    private readonly _$write: Uint32Array;\n    private readonly _$total: Uint32Array;\n    /** Audio sample index reading in the window */\n    get $read(): number {\n        return this._$read[0];\n    }\n    set $read(value: number) {\n        this._$read[0] = value;\n    }\n    /** Next audio sample index to write into the window */\n    get $write(): number {\n        return this._$write[0];\n    }\n    set $write(value: number) {\n        this._$write[0] = value;\n    }\n    /** Total samples written counter */\n    get $total(): number {\n        return this._$total[0];\n    }\n    set $total(value: number) {\n        this._$total[0] = value;\n    }\n    /** Get all atoms */\n    get asObject() {\n        return { $write: this._$write, $read: this._$read, $total: this._$total };\n    }\n    constructor() {\n        this._sab = new SharedArrayBuffer(3 * Uint32Array.BYTES_PER_ELEMENT);\n        this._$read = new Uint32Array(this._sab, 0, 1);\n        this._$write = new Uint32Array(this._sab, 4, 1);\n        this._$total = new Uint32Array(this._sab, 8, 1);\n    }\n}\nclass TemporalAnalyserProcessor extends AudioWorkletProxyProcessor<ITemporalAnalyserProcessor, ITemporalAnalyserNode, TemporalAnalyserParameters> implements ITemporalAnalyserProcessor {\n    static get parameterDescriptors(): TypedAudioParamDescriptor<TemporalAnalyserParameters>[] {\n        return [{\n            defaultValue: 1024,\n            maxValue: 2 ** 32,\n            minValue: 128,\n            name: \"windowSize\"\n        }];\n    }\n    private destroyed = false;\n    private readonly atoms = new TemporalAnalyserAtoms();\n    /** Concatenated audio data, array of channels */\n    private readonly windowSab: SharedArrayBuffer[] = [];\n    /** Float32Array Buffer view of window */\n    private readonly window: Float32Array[] = [];\n    /** Audio sample index reading in the window */\n    get $read() {\n        return this.atoms.$read;\n    }\n    set $read(value: number) {\n        this.atoms.$read = value;\n    }\n    /** Next audio sample index to write into the window */\n    get $write() {\n        return this.atoms.$write;\n    }\n    set $write(value: number) {\n        this.atoms.$write = value;\n    }\n    /** Total samples written counter */\n    get $total() {\n        return this.atoms.$total;\n    }\n    set $total(value: number) {\n        this.atoms.$total = value;\n    }\n    getRms() {\n        return this.window.map(a => rms(a, this.$read, this.windowSize));\n    }\n    getAbsMax() {\n        return this.window.map(a => absMax(a, this.$read, this.windowSize));\n    }\n    getZcr() {\n        return this.window.map(a => zcr(a, this.$read, this.windowSize));\n    }\n    getEstimatedFreq(threshold?: number, probabilityThreshold?: number) {\n        return this.window.map(ch => yinEstimate(ch, { sampleRate, threshold, probabilityThreshold }));\n    }\n    getBuffer() {\n        const data = this.window;\n        const { $read, $write, $total } = this.atoms.asObject;\n        return { data, $read, $write, $total };\n    }\n    gets<K extends keyof TemporalAnalysis>(...analysis: K[]) {\n        const result: Partial<TemporalAnalysis> = {};\n        for (const key of analysis) {\n            if (typeof key !== \"string\" || !key.length) continue;\n            const method = `get${key.charAt(0).toUpperCase()}${key.slice(1)}` as `get${Capitalize<string & K>}`;\n            if (this[method]) result[key] = this[method]() as TemporalAnalysis[K];\n        }\n        return result;\n    }\n    destroy() {\n        this.destroyed = true;\n        this._disposed = true;\n    }\n    private _windowSize = 1024;\n    get windowSize() {\n        return this._windowSize;\n    }\n    set windowSize(sizeIn: number) {\n        this._windowSize = ~~Math.min(2 ** 32, Math.max(128, sizeIn || 1024));\n    }\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<TemporalAnalyserParameters, Float32Array>) {\n        if (this.destroyed) return false;\n        const input = inputs[0];\n        this.windowSize = ~~parameters.windowSize[0];\n        const { windowSize } = this;\n\n        if (this.window.length > input.length) { // Too much channels ?\n            this.windowSab.splice(input.length);\n            this.window.splice(input.length);\n        }\n        if (input.length === 0) return true;\n\n        const bufferSize = Math.max(...input.map(c => c.length)) || 128;\n\n        const dataSize = windowSize + sampleRate;\n        this.$write %= dataSize;\n        this.$total += bufferSize;\n        let { $write } = this;\n        // Init windows\n        for (let i = 0; i < input.length; i++) {\n            $write = this.$write;\n            if (!this.window[i]) { // Initialise channel if not exist\n                this.windowSab[i] = new SharedArrayBuffer(dataSize * Float32Array.BYTES_PER_ELEMENT);\n                this.window[i] = new Float32Array(this.windowSab[i]);\n            } else {\n                if (this.window[i].length !== dataSize) { // adjust window size if not corresponded\n                    const oldWindow = this.window[i];\n                    const windowSab = new SharedArrayBuffer(dataSize * Float32Array.BYTES_PER_ELEMENT);\n                    const window = new Float32Array(windowSab);\n                    $write = setTypedArray(window, oldWindow, 0, $write - Math.min(dataSize, oldWindow.length));\n                    this.windowSab[i] = windowSab;\n                    this.window[i] = window;\n                }\n            }\n        }\n        this.$write = $write;\n        // Write\n        for (let i = 0; i < input.length; i++) {\n            const window = this.window[i];\n            const channel = input[i].length ? input[i] : new Float32Array(bufferSize);\n            if (bufferSize > dataSize) {\n                $write = setTypedArray(window, channel.subarray(bufferSize - dataSize), this.$write);\n            } else {\n                $write = setTypedArray(window, channel, this.$write);\n            }\n        }\n        this.$write = $write;\n        this.$read = mod($write - windowSize, dataSize);\n        return true;\n    }\n}\ntry {\n    registerProcessor(processorID, TemporalAnalyserProcessor);\n} catch (error) {\n    // eslint-disable-next-line no-console\n    console.warn(error);\n}\n"],"names":[],"sourceRoot":""}